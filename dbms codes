1. Database Schema for a Student Library scenario 
Consider that a database named Student Library is developed by an application software 
NMITSoft company.  
There are 4 tables in the database. Relationship scheme for the tables is as below: 
Student (Stud_no : integer,Stud_name: string) 
Membership (Mem_no: integer,Stud_no: integer) 
Book (book_no: integer, book_name:string, author: string) 
Iss_rec (iss_no:integer, iss_date: date, Mem_no: integer, book_no: integer) 
For the above schema, perform the following. 
a) Create the tables with the appropriate integrity constraints  
b) Insert around 10 records in each of the tables  
c) List all the student names with their membership numbers  
d) List all the issues for the current date with student and Book names 
e) Give a count of how many books have been bought by each students 
f) Give a list of books taken by student with stud_no as 5 -- Creating Student table 
CREATE TABLE Student ( 
Stud_no INT PRIMARY KEY, 
Stud_name VARCHAR(100) NOT NULL 
); -- Creating Membership table 
CREATE TABLE Membership ( 
Mem_no INT PRIMARY KEY, 
Stud_no INT, 
FOREIGN KEY (Stud_no) REFERENCES Student(Stud_no) 
); -- Creating Book table 
CREATE TABLE Book ( 
book_no INT PRIMARY KEY, 
book_name VARCHAR(100) NOT NULL, 
author VARCHAR(100) NOT NULL 
); -- Creating Iss_rec table 
CREATE TABLE Iss_rec ( 
iss_no INT PRIMARY KEY, 
iss_date DATE NOT NULL, 
Mem_no INT, 
book_no INT, 
FOREIGN KEY (Mem_no) REFERENCES Membership(Mem_no), 
FOREIGN KEY (book_no) REFERENCES Book(book_no) 
); -- Inserting records into Student table 
INSERT INTO Student (Stud_no, Stud_name) VALUES 
(1, 'Alice'), 
(2, 'Bob'), 
(3, 'Charlie'), 
(4, 'David'), 
(5, 'Eve'), 
(6, 'Frank'), 
(7, 'Grace'), 
(8, 'Hannah'), 
(9, 'Ivy'), 
(10, 'Jack'); -- Inserting records into Membership table 
INSERT INTO Membership (Mem_no, Stud_no) VALUES 
(101, 1), 
(102, 2), 
(103, 3), 
(104, 4), 
(105, 5), 
(106, 6), 
(107, 7), 
(108, 8), 
(109, 9), 
(110, 10); -- Inserting records into Book table 
INSERT INTO Book (book_no, book_name, author) VALUES 
(1001, 'Book A', 'Author 1'), 
(1002, 'Book B', 'Author 2'), 
(1003, 'Book C', 'Author 3'), 
(1004, 'Book D', 'Author 4'), 
(1005, 'Book E', 'Author 5'), 
(1006, 'Book F', 'Author 6'), 
(1007, 'Book G', 'Author 7'), 
(1008, 'Book H', 'Author 8'), 
(1009, 'Book I', 'Author 9'), 
(1010, 'Book J', 'Author 10'); -- Inserting records into Iss_rec table 
INSERT INTO Iss_rec (iss_no, iss_date, Mem_no, book_no) VALUES 
(1, '2024-07-09', 101, 1001), 
(2, '2024-07-09', 102, 1002), 
(3, '2024-07-09', 103, 1003), 
(4, '2024-07-09', 104, 1004), 
(5, '2024-07-09', 105, 1005), 
(6, '2024-07-09', 106, 1006), 
(7, '2024-07-08', 107, 1007), 
(8, '2024-07-08', 108, 1008), 
(9, '2024-07-07', 109, 1009), 
(10, '2024-07-06', 110, 1010); 
Query1:  
SELECT Student.Stud_name, Membership.Mem_no 
FROM Student, Membership 
WHERE Student.Stud_no = Membership.Stud_no; 
Query2: 
SELECT Student.Stud_name, Book.book_name 
FROM Student, Membership, Iss_rec, Book 
WHERE Student.Stud_no = Membership.Stud_no 
AND Membership.Mem_no = Iss_rec.Mem_no 
AND Iss_rec.book_no = Book.book_no 
AND Iss_rec.iss_date = CURRENT_DATE; 
Query 3: 
SELECT Student.Stud_name, COUNT(Iss_rec.book_no) AS book_count 
FROM Student, Membership, Iss_rec 
WHERE Student.Stud_no = Membership.Stud_no 
AND Membership.Mem_no = Iss_rec.Mem_no 
GROUP BY Student.Stud_name; 
Query 4: 
SELECT Book.book_name 
FROM Book, Iss_rec, Membership 
WHERE Book.book_no = Iss_rec.book_no 
AND Iss_rec.Mem_no = Membership.Mem_no 
AND Membership.Stud_no = 5; 
2. Create a relational database schema for a Project, described by the following 
relations.  
STUDENT (Rollno: integer, Name: String, Sem: integer, Degree: String, Contact no: integer, 
Guide_No: integer) 
GUIDE (Guide_name: String, Guide_No: integer, Guide_reserach_domain: String, 
Contact_No: integer, Email_Id: String)  
PROJECT (Project_No: Integer, Project_title: String, Project_Area: String, Start_dt, date, 
Guide_No: integer)  
GROUP (Group_Code: integer, Roll_No:integer )  
PROJECT_GROUP (Group_Code: integer, Project_No: integer, no_of_students:integer)  
For the above schema, perform the following.  
a) Create the tables with the appropriate integrity constraints  
b) Insert around 10 records in each of the tables  
c) Find the list of guide, who are guiding more than two student groups.  
d) Find the list of project no, project name & name of guide, in domain of Data Base.  
e) Create a view as student_project details that lists student name, project name and guide 
name -- Creating GUIDE table first because STUDENT references it 
CREATE TABLE GUIDE ( 
Guide_No INT PRIMARY KEY, 
Guide_name VARCHAR(100) NOT NULL, 
Guide_research_domain VARCHAR(100), 
Contact_No BIGINT, 
Email_Id VARCHAR(100) 
); -- Creating STUDENT table 
CREATE TABLE STUDENT ( 
Rollno INT PRIMARY KEY, 
Name VARCHAR(100) NOT NULL, 
Sem INT, 
Degree VARCHAR(100), 
Contact_no BIGINT, 
Guide_No INT, 
FOREIGN KEY (Guide_No) REFERENCES GUIDE(Guide_No) 
); -- Creating PROJECT table 
CREATE TABLE PROJECT ( 
Project_No INT PRIMARY KEY, 
Project_title VARCHAR(200), 
Project_Area VARCHAR(100), 
Start_dt DATE, 
Guide_No INT, 
FOREIGN KEY (Guide_No) REFERENCES GUIDE(Guide_No) 
); -- Creating GROUP table 
CREATE TABLE `GROUP` ( 
Group_Code INT, 
Roll_No INT, 
PRIMARY KEY (Group_Code, Roll_No), 
FOREIGN KEY (Roll_No) REFERENCES STUDENT(Rollno) 
); -- Creating PROJECT_GROUP table 
CREATE TABLE PROJECT_GROUP ( 
Group_Code INT, 
Project_No INT, 
no_of_students INT, 
PRIMARY KEY (Group_Code, Project_No), 
FOREIGN KEY (Group_Code) REFERENCES `GROUP`(Group_Code), 
FOREIGN KEY (Project_No) REFERENCES PROJECT(Project_No) 
); -- Inserting records into GUIDE table 
INSERT INTO GUIDE (Guide_No, Guide_name, Guide_research_domain, Contact_No, Email_Id) VALUES 
(1, 'Dr. Smith', 'Data Base', 1234567890, 'smith@example.com'), 
(2, 'Dr. Jones', 'Artificial Intelligence', 2345678901, 'jones@example.com'), 
(3, 'Dr. Brown', 'Machine Learning', 3456789012, 'brown@example.com'), 
(4, 'Dr. Taylor', 'Data Base', 4567890123, 'taylor@example.com'); -- Inserting records into STUDENT table 
INSERT INTO STUDENT (Rollno, Name, Sem, Degree, Contact_no, Guide_No) VALUES 
(101, 'Alice', 6, 'B.Tech', 9876543210, 1), 
(102, 'Bob', 6, 'B.Tech', 8765432109, 1), 
(103, 'Charlie', 6, 'B.Tech', 7654321098, 2), 
(104, 'David', 6, 'B.Tech', 6543210987, 2), 
(105, 'Eve', 6, 'B.Tech', 5432109876, 3), 
(106, 'Frank', 6, 'B.Tech', 4321098765, 3), 
(107, 'Grace', 6, 'B.Tech', 3210987654, 4), 
(108, 'Hannah', 6, 'B.Tech', 2109876543, 4), 
(109, 'Ivy', 6, 'B.Tech', 1098765432, 1), 
(110, 'Jack', 6, 'B.Tech', 1987654321, 2); -- Inserting records into PROJECT table 
INSERT INTO PROJECT (Project_No, Project_title, Project_Area, Start_dt, Guide_No) VALUES 
(1001, 'Database Optimization', 'Data Base', '2024-01-15', 1), 
(1002, 'AI in Healthcare', 'Artificial Intelligence', '2024-02-01', 2), 
(1003, 'Machine Learning Algorithms', 'Machine Learning', '2024-03-10', 3), 
(1004, 'Big Data Analysis', 'Data Base', '2024-04-20', 4); -- Inserting records into GROUP table 
INSERT INTO `GROUP` (Group_Code, Roll_No) VALUES 
(1, 101), (1, 102), (2, 103), (2, 104), (3, 105), (3, 106), 
(4, 107), (4, 108), (5, 109), (5, 110); -- Inserting records into PROJECT_GROUP table 
INSERT INTO PROJECT_GROUP (Group_Code, Project_No, no_of_students) VALUES 
(1, 1001, 2), (2, 1002, 2), (3, 1003, 2), (4, 1004, 2), (5, 1001, 2); 
Find the list of guides who are guiding more than two student groups 
SELECT Guide_name 
FROM GUIDE 
WHERE Guide_No IN ( 
SELECT Guide_No 
FROM PROJECT 
WHERE Project_No IN ( 
SELECT Project_No 
FROM PROJECT_GROUP 
GROUP BY Project_No 
HAVING COUNT(Group_Code) > 2 
) 
); 
Find the list of project numbers, project names, and names of guides, in the 
domain of Data Base 
SELECT P.Project_No, P.Project_title, G.Guide_name 
FROM PROJECT P, GUIDE G 
WHERE P.Guide_No = G.Guide_No 
AND P.Project_Area = 'Data Base'; 
Create a view as student_project details that lists student names, project names, 
and guide names 
CREATE VIEW student_project_details AS 
SELECT S.Name AS Student_Name, P.Project_title AS Project_Name, G.Guide_name 
AS Guide_Name 
FROM STUDENT S, `GROUP` G1, PROJECT_GROUP PG, PROJECT P, GUIDE G 
WHERE S.Rollno = G1.Roll_No 
AND G1.Group_Code = PG.Group_Code 
AND PG.Project_No = P.Project_No 
AND P.Guide_No = G.Guide_No; 
To see the created view, you can use a SELECT statement to query the view just like you would 
with a table. Here is how you can do it: 
SELECT * FROM student_project_details; 
1. The following relations keep track of airline flight information:  
Flights (flno: integer, from: string, to: string, distance: integer, departs: time, arrives: time, 
price: integer)  
Aircraft (aid: integer, aname: string, cruisingrange: integer) 
Certified (eid: integer, aid: integer) 
Employees (eid: integer, ename: string, salary: integer)  
Note that the Employees relation describes pilots and other kinds of employees as well; every 
pilot is certified for some aircraft, and only pilots are certified to fly. 
For the above schema, perform the following. 
a) Create the above tables by specifying primary keys and foreign keys.  
b) Insert around 10 records in each of the tables.  
c) Find the names of aircraft such that all pilots certified to operate them earn more than 80,000.  
d) For each pilot who is certified for more than three aircraft, find the eid and the maximum 
cruising range of the aircraft that he (or she) is certified for. 
e) Find the names of pilots whose salary is less than the price of the cheapest route from Los 
Angeles to Honolulu.  
f) Find the second highest salary of an employee. -- Creating Flights table 
CREATE TABLE Flights ( 
flno INT PRIMARY KEY, 
`from` VARCHAR(100), 
`to` VARCHAR(100), 
distance INT, 
departs TIME, 
arrives TIME, 
price INT 
); -- Creating Aircraft table 
CREATE TABLE Aircraft ( 
aid INT PRIMARY KEY, 
aname VARCHAR(100), 
cruisingrange INT 
); -- Creating Certified table 
CREATE TABLE Certified ( 
eid INT, 
aid INT, 
PRIMARY KEY (eid, aid), 
FOREIGN KEY (eid) REFERENCES Employees(eid), 
FOREIGN KEY (aid) REFERENCES Aircraft(aid) 
); -- Creating Employees table 
CREATE TABLE Employees ( 
eid INT PRIMARY KEY, 
ename VARCHAR(100), 
salary INT 
); -- Inserting records into Employees table 
INSERT INTO Employees (eid, ename, salary) VALUES 
(1, 'John Doe', 90000), 
(2, 'Jane Smith', 85000), 
(3, 'Robert Brown', 95000), 
(4, 'Lucy Black', 70000), 
(5, 'Michael White', 80000), 
(6, 'Susan Green', 60000), 
(7, 'William Blue', 75000), 
(8, 'Emma Red', 82000), 
(9, 'George Yellow', 91000), 
(10, 'Hannah Purple', 92000); -- Inserting records into Aircraft table 
INSERT INTO Aircraft (aid, aname, cruisingrange) VALUES 
(1, 'Boeing 737', 3000), 
(2, 'Airbus A320', 3500), 
(3, 'Boeing 747', 5000), 
(4, 'Concorde', 4000), 
(5, 'Cessna 172', 800), 
(6, 'Boeing 777', 6000), 
(7, 'Airbus A380', 8000), 
(8, 'Boeing 787', 7000), 
(9, 'Airbus A330', 4000), 
(10, 'Embraer E190', 2500); -- Inserting records into Certified table 
INSERT INTO Certified (eid, aid) VALUES 
(1, 1), (1, 2), (2, 3), (2, 4), (3, 5), (3, 6), 
(4, 7), (4, 8), (5, 9), (5, 10), (6, 1), (7, 2), 
(8, 3), (9, 4), (10, 5), (10, 6), (10, 7), (10, 8); -- Inserting records into Flights table 
INSERT INTO Flights (flno, `from`, `to`, distance, departs, arrives, price) VALUES 
(1, 'Los Angeles', 'New York', 3000, '08:00:00', '16:00:00', 500), 
(2, 'Chicago', 'San Francisco', 2500, '09:00:00', '15:00:00', 450), 
(3, 'Houston', 'Miami', 1200, '10:00:00', '14:00:00', 350), 
(4, 'Dallas', 'Seattle', 2200, '11:00:00', '17:00:00', 400), 
(5, 'Boston', 'Los Angeles', 3200, '12:00:00', '20:00:00', 550), 
(6, 'San Diego', 'Las Vegas', 300, '13:00:00', '14:00:00', 200), 
(7, 'Orlando', 'Atlanta', 600, '14:00:00', '16:00:00', 250), 
(8, 'New York', 'Chicago', 800, '15:00:00', '18:00:00', 300), 
(9, 'San Francisco', 'Denver', 1500, '16:00:00', '20:00:00', 350), 
(10, 'Los Angeles', 'Honolulu', 2500, '17:00:00', '22:00:00', 600); 
Find the names of aircraft such that all pilots certified to operate them earn more 
than 80,000 
SELECT aname 
FROM Aircraft A 
WHERE NOT EXISTS ( 
SELECT * 
FROM Certified C, Employees E 
WHERE C.aid = A.aid 
AND C.eid = E.eid 
AND E.salary <= 80000 
); 
For each pilot who is certified for more than three aircraft, find the eid and the 
maximum cruising range of the aircraft that he (or she) is certified for 
SELECT C.eid, MAX(A.cruisingrange) AS max_cruising_range 
FROM Certified C, Aircraft A 
WHERE C.aid = A.aid 
GROUP BY C.eid 
HAVING COUNT(C.aid) > 3; 
Find the names of pilots whose salary is less than the price of the cheapest route 
from Los Angeles to Honolulu 
SELECT E.ename 
FROM Employees E 
WHERE E.salary < ( 
SELECT MIN(F.price) 
FROM Flights F 
WHERE F.from = 'Los Angeles' AND F.to = 'Honolulu' 
); 
Find the second highest salary of an employee 
SELECT MAX(salary) AS second_highest_salary 
FROM Employees 
WHERE salary < ( 
SELECT MAX(salary) 
FROM Employees 
); 
4. Consider a relational database schema for a Company database below. 
Employee (F_name: string, L_name: string, Emp_id:integer, Bdate: date, Address:string, 
Gender:string,Salary: integer, Super_Emp_id: integer, D_no: integer)  
Department (D_name: string, D_no: integer, D_Mgr_id:integer, Mgr_start_date: date)  
Dept_Location (D_no: integer, D_location:string)  
Project (P_name: string, P_number:integer, P_location:string, D_no:integer ) 
Works_on (Emp_id: integer, P_no: integer, Hours: in)  
Dependent (Emp_id:integer, Dependent_name:string,Gender:string,Bdate:date, 
Relationship:String) 
For the above schema, perform the following 
a) Create the above tables by specifying primary keys and foreign keys. 
b) Insert around 10 records in each of the tables.  
c) Find the names and address of all employees who work on same department.  
d) Retrieve a list of employees and the projects they are working on, ordered by department 
and, within each department, ordered alphabetically by last name, then first name.  
e) Create a view Dept_info that gives details of department name, Number of employees and 
total salary of each employee. -- Creating Employee table 
CREATE TABLE Employee ( 
F_name VARCHAR(50), 
L_name VARCHAR(50), 
Emp_id INT PRIMARY KEY, 
Bdate DATE, 
Address VARCHAR(200), 
Gender VARCHAR(10), 
Salary INT, 
Super_Emp_id INT, 
D_no INT, 
FOREIGN KEY (Super_Emp_id) REFERENCES Employee(Emp_id), 
FOREIGN KEY (D_no) REFERENCES Department(D_no) 
); 
-- Creating Department table 
CREATE TABLE Department ( 
D_name VARCHAR(100), 
D_no INT PRIMARY KEY, 
D_Mgr_id INT, 
Mgr_start_date DATE, 
FOREIGN KEY (D_Mgr_id) REFERENCES Employee(Emp_id) 
); -- Creating Dept_Location table 
CREATE TABLE Dept_Location ( 
D_no INT, 
D_location VARCHAR(100), 
PRIMARY KEY (D_no, D_location), 
FOREIGN KEY (D_no) REFERENCES Department(D_no) 
); -- Creating Project table 
CREATE TABLE Project ( 
P_name VARCHAR(100), 
P_number INT PRIMARY KEY, 
P_location VARCHAR(100), 
D_no INT, 
FOREIGN KEY (D_no) REFERENCES Department(D_no) 
); -- Creating Works_on table 
CREATE TABLE Works_on ( 
Emp_id INT, 
P_no INT, 
Hours INT, 
PRIMARY KEY (Emp_id, P_no), 
FOREIGN KEY (Emp_id) REFERENCES Employee(Emp_id), 
FOREIGN KEY (P_no) REFERENCES Project(P_number) 
); -- Creating Dependent table 
CREATE TABLE Dependent ( 
Emp_id INT, 
Dependent_name VARCHAR(100), 
Gender VARCHAR(10), 
Bdate DATE, 
Relationship VARCHAR(50), 
PRIMARY KEY (Emp_id, Dependent_name), 
FOREIGN KEY (Emp_id) REFERENCES Employee(Emp_id) 
); -- Inserting records into Employee table 
INSERT INTO Employee (F_name, L_name, Emp_id, Bdate, Address, Gender, Salary, Super_Emp_id, 
D_no) VALUES 
('John', 'Doe', 1, '1980-01-01', '123 Main St', 'M', 60000, NULL, 1), 
('Jane', 'Smith', 2, '1985-02-02', '456 Elm St', 'F', 70000, 1, 1), 
('Robert', 'Brown', 3, '1970-03-03', '789 Oak St', 'M', 80000, 1, 2), 
('Lucy', 'Black', 4, '1990-04-04', '321 Pine St', 'F', 65000, 3, 2), 
('Michael', 'White', 5, '1982-05-05', '654 Cedar St', 'M', 75000, 3, 3), 
('Susan', 'Green', 6, '1975-06-06', '987 Birch St', 'F', 85000, 3, 3), 
('William', 'Blue', 7, '1988-07-07', '213 Spruce St', 'M', 90000, 5, 4), 
('Emma', 'Red', 8, '1992-08-08', '456 Maple St', 'F', 72000, 5, 4), 
('George', 'Yellow', 9, '1981-09-09', '789 Willow St', 'M', 78000, 7, 5), 
('Hannah', 'Purple', 10, '1987-10-10', '321 Fir St', 'F', 68000, 7, 5); -- Inserting records into Department table 
INSERT INTO Department (D_name, D_no, D_Mgr_id, Mgr_start_date) VALUES 
('HR', 1, 1, '2020-01-01'), 
('Finance', 2, 3, '2020-02-01'), 
('Engineering', 3, 5, '2020-03-01'), 
('Marketing', 4, 7, '2020-04-01'), 
('Sales', 5, 9, '2020-05-01'); -- Inserting records into Dept_Location table 
INSERT INTO Dept_Location (D_no, D_location) VALUES 
(1, 'New York'), (1, 'Boston'), (2, 'Chicago'), (2, 'San Francisco'), 
(3, 'Los Angeles'), (3, 'Seattle'), (4, 'Miami'), (4, 'Dallas'), 
(5, 'Houston'), (5, 'Atlanta'); -- Inserting records into Project table 
INSERT INTO Project (P_name, P_number, P_location, D_no) VALUES 
('Project A', 101, 'New York', 1), 
('Project B', 102, 'Chicago', 2), 
('Project C', 103, 'Los Angeles', 3), 
('Project D', 104, 'Miami', 4), 
('Project E', 105, 'Houston', 5), 
('Project F', 106, 'Boston', 1), 
('Project G', 107, 'San Francisco', 2), 
('Project H', 108, 'Seattle', 3), 
('Project I', 109, 'Dallas', 4), 
('Project J', 110, 'Atlanta', 5); 
-- Inserting records into Works_on table 
INSERT INTO Works_on (Emp_id, P_no, Hours) VALUES 
(1, 101, 10), (2, 101, 20), (3, 102, 15), (4, 102, 25), (5, 103, 30), 
(6, 103, 35), (7, 104, 40), (8, 104, 45), (9, 105, 50), (10, 105, 55); -- Inserting records into Dependent table 
INSERT INTO Dependent (Emp_id, Dependent_name, Gender, Bdate, Relationship) VALUES 
(1, 'Alice', 'F', '2010-01-01', 'Daughter'), (2, 'Bob', 'M', '2012-02-02', 'Son'), 
(3, 'Charlie', 'M', '2014-03-03', 'Son'), (4, 'Daisy', 'F', '2016-04-04', 'Daughter'), 
(5, 'Edward', 'M', '2018-05-05', 'Son'), (6, 'Fiona', 'F', '2020-06-06', 'Daughter'), 
(7, 'George', 'M', '2010-07-07', 'Son'), (8, 'Hannah', 'F', '2012-08-08', 'Daughter'), 
(9, 'Ivy', 'F', '2014-09-09', 'Daughter'), (10, 'Jack', 'M', '2016-10-10', 'Son'); 
Find the names and addresses of all employees who work in the same department 
SELECT E1.F_name, E1.L_name, E1.Address 
FROM Employee E1, Employee E2 
WHERE E1.D_no = E2.D_no 
AND E1.Emp_id != E2.Emp_id; 
Retrieve a list of employees and the projects they are working on, ordered by 
department and, within each department, ordered alphabetically by last name, 
then first name 
SELECT E.F_name, E.L_name, P.P_name 
FROM Employee E, Works_on W, Project P, Department D 
WHERE E.Emp_id = W.Emp_id 
AND W.P_no = P.P_number 
AND E.D_no = D.D_no 
ORDER BY D.D_name, E.L_name, E.F_name; 
Create a view Dept_info that gives details of department name, number of 
employees, and total salary of each employee 
CREATE VIEW Dept_info AS 
SELECT D.D_name, COUNT(E.Emp_id) AS num_employees, SUM(E.Salary) AS 
total_salary 
FROM Department D, Employee E 
WHERE D.D_no = E.D_no 
GROUP BY D.D_name; 
4. Consider a relational database schema for a Sailors database below  
Sailors (sid: integer, sname: string, rating: integer, age: real);  
Boats (bid: integer, bname: string, color: string); 
Reserves (sid: integer, bid: integer, day: date). 
For the above schema, perform the following.  
a) Create the above tables by specifying primary keys and foreign keys.  
b) Insert around 10 records in each of the tables.  
c) Find the names of sailors who have reserved a red boat, and list in the order of age. 
d) Find the names of sailors who have reserved boat 103. 
e) Find the name and the age of the youngest sailor.  
f) Find the average age of sailors for each rating level that has at least two sailors. -- Creating Sailors table 
CREATE TABLE Sailors ( 
sid INT PRIMARY KEY, 
sname VARCHAR(50), 
rating INT, 
age REAL 
); -- Creating Boats table 
CREATE TABLE Boats ( 
bid INT PRIMARY KEY, 
bname VARCHAR(50), 
color VARCHAR(50) 
); -- Creating Reserves table 
CREATE TABLE Reserves ( 
sid INT, 
bid INT, 
day DATE, 
PRIMARY KEY (sid, bid, day), 
FOREIGN KEY (sid) REFERENCES Sailors(sid), 
FOREIGN KEY (bid) REFERENCES Boats(bid) 
); -- Inserting records into Sailors table 
INSERT INTO Sailors (sid, sname, rating, age) VALUES 
(1, 'John', 10, 25.5), 
(2, 'Jane', 8, 22.3), 
(3, 'Bob', 9, 30.4), 
(4, 'Alice', 7, 19.7), 
(5, 'Tom', 8, 23.9), 
(6, 'Sue', 9, 27.1), 
(7, 'Jim', 10, 21.8), 
(8, 'Pat', 7, 24.6), 
(9, 'Tim', 8, 20.2), 
(10, 'Kim', 9, 29.3); -- Inserting records into Boats table 
INSERT INTO Boats (bid, bname, color) VALUES 
(101, 'Boat A', 'red'), 
(102, 'Boat B', 'blue'), 
(103, 'Boat C', 'red'), 
(104, 'Boat D', 'green'), 
(105, 'Boat E', 'blue'), 
(106, 'Boat F', 'red'), 
(107, 'Boat G', 'yellow'), 
(108, 'Boat H', 'red'), 
(109, 'Boat I', 'blue'), 
(110, 'Boat J', 'green'); -- Inserting records into Reserves table 
INSERT INTO Reserves (sid, bid, day) VALUES 
(1, 101, '2024-07-01'), 
(2, 102, '2024-07-02'), 
(3, 103, '2024-07-03'), 
(4, 104, '2024-07-04'), 
(5, 105, '2024-07-05'), 
(6, 106, '2024-07-06'), 
(7, 107, '2024-07-07'), 
(8, 108, '2024-07-08'), 
(9, 109, '2024-07-09'), 
(10, 110, '2024-07-10'); 
Find the names of sailors who have reserved a red boat, and list in the order of 
age 
SELECT S.sname 
FROM Sailors S, Reserves R, Boats B 
WHERE S.sid = R.sid 
AND R.bid = B.bid 
AND B.color = 'red' 
ORDER BY S.age; 
Find the names of sailors who have reserved boat 103 
SELECT S.sname 
FROM Sailors S, Reserves R 
WHERE S.sid = R.sid 
AND R.bid = 103; 
Find the name and the age of the youngest sailor 
SELECT S.sname, S.age 
FROM Sailors S 
ORDER BY S.age ASC 
LIMIT 1; 
Find the average age of sailors for each rating level that has at least two sailors 
SELECT S.rating, AVG(S.age) AS avg_age 
FROM Sailors S 
GROUP BY S.rating 
HAVING COUNT(S.sid) >= 2; 
